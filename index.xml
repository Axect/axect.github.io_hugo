<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Axect&#39;s Blog</title>
    <link>https://axect.github.io/</link>
    <description>Recent content on Axect&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>kr</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Tue, 09 Mar 2021 22:01:39 +0900</lastBuildDate><atom:link href="https://axect.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>🏫 고등학교 수학으로 이해하는 선형회귀</title>
      <link>https://axect.github.io/posts/003_highschool_linreg/</link>
      <pubDate>Tue, 09 Mar 2021 22:01:39 +0900</pubDate>
      
      <guid>https://axect.github.io/posts/003_highschool_linreg/</guid>
      <description>2016 Breakthrough of the year
    세계에서 가장 유명하고 권위있는 과학저널인 사이언스(Science)에서는 매년 그 해의 가장 성공적이었다고 여겨지는 과학성과를 발표합니다. 2016년 12월 22일에도 2016 Breakthrough of the year  를 발표하면서 2016년에 있었던 과학 성과 중 가장 눈여겨봐야 할 10개의 과학성과를 발표했습니다. 순위는 다음과 같습니다.${}^{[1]}$
  1. 중력파 발견
2. 외계행성 &amp;lsquo;프록시마b&amp;rsquo; 발견
3. 인공지능 &amp;lsquo;알파고&amp;rsquo;와 이세돌 9단의 대결
4. 세포 노화 및 회춘 연구</description>
    </item>
    
    <item>
      <title>🖊️ Rust와 미분하기 02: 기호 미분</title>
      <link>https://axect.github.io/posts/002_ad_2/</link>
      <pubDate>Sat, 03 Oct 2020 03:36:49 +0900</pubDate>
      
      <guid>https://axect.github.io/posts/002_ad_2/</guid>
      <description>🔖 Automatic Differentiation Series
 💻 Numerical Differentiation 🖊️ Symbolic Differentiation   📉 수치적 미분의 한계 저번 포스트에서 수치적 미분을 여러가지 방법으로 구현하는 것을 다뤄보았는데, 어떠셨나요? 아마, 코딩에 대한 조금의 지식만 있으면 오히려 고등학교때의 미분보다 훨씬 쉽게 느껴지셨을 겁니다. 저희가 사용한 것이라고는 그저 도함수의 정의에 따라 함수에 각 구간 값을 대입한 것이 전부였는데, 이를 코드로 나타내면 결국 다음의 코드에 지나지 않습니다.
# Python def differentiation(f, x, h=1e-06): return (f(x + h) - f(x)) / h 나머지는 이를 객체지향적으로 구현하거나, 함수형 프로그래밍으로 구현하거나 제너릭 프로그래밍을 도입하는 등의 구현방법의 차이일 뿐이었습니다.</description>
    </item>
    
    <item>
      <title>🧙 Rust와 미분하기 01: 수치적 미분</title>
      <link>https://axect.github.io/posts/002_ad_1/</link>
      <pubDate>Sun, 24 May 2020 02:44:11 +0900</pubDate>
      
      <guid>https://axect.github.io/posts/002_ad_1/</guid>
      <description>미분은 희대의 천재였던 아이작 뉴턴이래로 없어서는 안 될 중요한 개념이 되었습니다. 문과나 이과 모두 구분없이 고등학교때 적어도 다항함수의 미분법은 배우며 이공계는 거의 모든 학과에서 미분방정식을 다룹니다. 물리학과의 경우는 좀 더 미분 의존도가 심한데, 당장 물리의 시작이라고 할 수 있는 고전역학부터 오일러-라그랑주 방정식(Euler-Lagrange equation)에 의존하며 물리학과의 핵심이라 할 수 있는 전자기학, 양자역학은 거의 모든 수식에 미분이 빠지지 않습니다.
당연하게도 수치 계산 분야에서도 미분은 항상 등장합니다. 다만, 인간이 미분을 이해하는 방식과 컴퓨터가 이해하는 방식은 차이가 있기에 미분을 받아들이는 방법 역시 조금 다릅니다.</description>
    </item>
    
    <item>
      <title>🐪 가우시안 정복하기 01: 단일변수</title>
      <link>https://axect.github.io/posts/001_gaussian/</link>
      <pubDate>Fri, 22 May 2020 17:00:31 +0900</pubDate>
      
      <guid>https://axect.github.io/posts/001_gaussian/</guid>
      <description>물리학이나 통계학 등을 하다보면 항상 마주치는 원수 같은 존재가 있습니다. 별로 어렵지는 않은데 마주칠 때마다 헷갈리는 그 존재는 바로 가우스 적분(Gaussian Integral)입니다.
$$\int_{-\infty}^\infty e^{-\alpha x^2} dx$$
이공계 대학생이라면 1학년 미적분학 시간에 극좌표계(Polar coordinate)를 이용한 이중적분을 다룰 때 나오는 가장 기본문제로 가우스 적분을 기억할겁니다. 그러나 항상 거의 모두가 그렇듯이 시간이 지나면 지날 수록 기억은 풍화되고 거의 망각의 단계에 이르렀을 때에 갑자기 튀어나오는 낯선 형태의 가우스 적분들은 대처하기가 난감합니다.
따라서 여기서는 가우스 적분과 가우시안 분포에 대한 아주 기본적인 성질들을 다시 상기시키고 이를 발판삼아 다변수 가우시안(Multivariate Gaussian)과 여러 활용들을 살펴보도록 하겠습니다.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://axect.github.io/about/</link>
      <pubDate>Thu, 21 May 2020 15:15:36 +0900</pubDate>
      
      <guid>https://axect.github.io/about/</guid>
      <description>김태근 (Axect)을 소개합니다.
 저는 수학, 물리학 그리고 프로그래밍을 좋아하는 대학원생입니다.
 학력  Ph.D: 연세대학교 대학원 물리학과 (2020 ~ ) M.S.: 연세대학교 대학원 물리학과 (2017 ~ 2019) B.S.: 연세대학교 천문우주학과 (2012 ~ 2017)   연구분야  입자물리학 현상론 과학계산 우주론 및 수치 상대론   학문 및 기술 수학  함수해석학 수치해석학  유한차분법 유한요소법   미분기하학 위상수학  물리학  일반상대성이론 양자장이론 수리물리학  프로그래밍  주 언어  Rust, Julia, Python   보조 언어  C++, Fortran, Haskell   프레임워크 및 라이브러리  수치 계산  peroxide, BLAS, LAPACK, numpy, scipy   시각화  matplotlib, vegas, ggplot2, plotly   웹  Django, Vue, Firebase, Surge, Hugo, Zola   머신러닝  Flux, Tensorflow, Torch       프로젝트   Peroxide: Rust 수치 계산 라이브러리 (Maintainer)</description>
    </item>
    
  </channel>
</rss>
